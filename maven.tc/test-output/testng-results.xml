<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="5" passed="5">
  <reporter-output>
    <line>
      <![CDATA[in the before suite]]>
    </line>
    <line>
      <![CDATA[settings done]]>
    </line>
    <line>
      <![CDATA[CONFIG LOAD PROPERTIIES]]>
    </line>
    <line>
      <![CDATA[Report generated with screenshot]]>
    </line>
    <line>
      <![CDATA[Report generated with screenshot]]>
    </line>
    <line>
      <![CDATA[Report generated with screenshot]]>
    </line>
    <line>
      <![CDATA[Report generated with screenshot]]>
    </line>
    <line>
      <![CDATA[Report generated with screenshot]]>
    </line>
  </reporter-output>
  <suite name="Default suite" duration-ms="43933" started-at="2020-09-29T09:13:07Z" finished-at="2020-09-29T09:13:51Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="43933" started-at="2020-09-29T09:13:07Z" finished-at="2020-09-29T09:13:51Z">
      <class name="TestCases.FunctionalTest">
        <test-method status="PASS" signature="beforesuite()[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="beforesuite" is-config="true" duration-ms="367" started-at="2020-09-29T14:43:07Z" finished-at="2020-09-29T14:43:07Z">
          <reporter-output>
            <line>
              <![CDATA[in the before suite]]>
            </line>
            <line>
              <![CDATA[settings done]]>
            </line>
          </reporter-output>
        </test-method> <!-- beforesuite -->
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="beforeTest" is-config="true" duration-ms="8403" started-at="2020-09-29T14:43:07Z" finished-at="2020-09-29T14:43:15Z">
          <reporter-output>
            <line>
              <![CDATA[CONFIG LOAD PROPERTIIES]]>
            </line>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="beforMethod(java.lang.reflect.Method)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="beforMethod" is-config="true" duration-ms="2" started-at="2020-09-29T14:43:15Z" finished-at="2020-09-29T14:43:15Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.FunctionalTest.whenNoHotel() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforMethod -->
        <test-method status="PASS" signature="whenNoHotel()[pri:1, instance:TestCases.FunctionalTest@4566e5bd]" name="whenNoHotel" duration-ms="2245" started-at="2020-09-29T14:43:15Z" finished-at="2020-09-29T14:43:18Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- whenNoHotel -->
        <test-method status="PASS" signature="aftermethod(org.testng.ITestResult)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="aftermethod" is-config="true" duration-ms="1042" started-at="2020-09-29T14:43:18Z" finished-at="2020-09-29T14:43:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=whenNoHotel status=SUCCESS method=FunctionalTest.whenNoHotel()[pri:1, instance:TestCases.FunctionalTest@4566e5bd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Report generated with screenshot]]>
            </line>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="DifferentHotelPrice()[pri:2, instance:TestCases.FunctionalTest@4566e5bd]" name="DifferentHotelPrice" duration-ms="3199" started-at="2020-09-29T14:43:19Z" finished-at="2020-09-29T14:43:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- DifferentHotelPrice -->
        <test-method status="PASS" signature="beforMethod(java.lang.reflect.Method)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="beforMethod" is-config="true" duration-ms="0" started-at="2020-09-29T14:43:19Z" finished-at="2020-09-29T14:43:19Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.FunctionalTest.DifferentHotelPrice()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforMethod -->
        <test-method status="PASS" signature="aftermethod(org.testng.ITestResult)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="aftermethod" is-config="true" duration-ms="607" started-at="2020-09-29T14:43:22Z" finished-at="2020-09-29T14:43:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=DifferentHotelPrice status=SUCCESS method=FunctionalTest.DifferentHotelPrice()[pri:2, instance:TestCases.FunctionalTest@4566e5bd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Report generated with screenshot]]>
            </line>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="beforMethod(java.lang.reflect.Method)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="beforMethod" is-config="true" duration-ms="0" started-at="2020-09-29T14:43:23Z" finished-at="2020-09-29T14:43:23Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.FunctionalTest.AdditionalChargeInclude()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforMethod -->
        <test-method status="PASS" signature="AdditionalChargeInclude()[pri:3, instance:TestCases.FunctionalTest@4566e5bd]" name="AdditionalChargeInclude" duration-ms="12518" started-at="2020-09-29T14:43:23Z" finished-at="2020-09-29T14:43:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AdditionalChargeInclude -->
        <test-method status="PASS" signature="aftermethod(org.testng.ITestResult)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="aftermethod" is-config="true" duration-ms="1416" started-at="2020-09-29T14:43:35Z" finished-at="2020-09-29T14:43:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=AdditionalChargeInclude status=SUCCESS method=FunctionalTest.AdditionalChargeInclude()[pri:3, instance:TestCases.FunctionalTest@4566e5bd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Report generated with screenshot]]>
            </line>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="beforMethod(java.lang.reflect.Method)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="beforMethod" is-config="true" duration-ms="0" started-at="2020-09-29T14:43:37Z" finished-at="2020-09-29T14:43:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.FunctionalTest.onlyAdditionalCharges() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforMethod -->
        <test-method status="PASS" signature="onlyAdditionalCharges()[pri:4, instance:TestCases.FunctionalTest@4566e5bd]" name="onlyAdditionalCharges" duration-ms="5057" started-at="2020-09-29T14:43:37Z" finished-at="2020-09-29T14:43:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- onlyAdditionalCharges -->
        <test-method status="PASS" signature="aftermethod(org.testng.ITestResult)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="aftermethod" is-config="true" duration-ms="624" started-at="2020-09-29T14:43:42Z" finished-at="2020-09-29T14:43:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=onlyAdditionalCharges status=SUCCESS method=FunctionalTest.onlyAdditionalCharges()[pri:4, instance:TestCases.FunctionalTest@4566e5bd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Report generated with screenshot]]>
            </line>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="beforMethod(java.lang.reflect.Method)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="beforMethod" is-config="true" duration-ms="1" started-at="2020-09-29T14:43:42Z" finished-at="2020-09-29T14:43:42Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void TestCases.FunctionalTest.removeHotelSelection() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforMethod -->
        <test-method status="PASS" signature="removeHotelSelection()[pri:5, instance:TestCases.FunctionalTest@4566e5bd]" name="removeHotelSelection" duration-ms="7083" started-at="2020-09-29T14:43:42Z" finished-at="2020-09-29T14:43:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- removeHotelSelection -->
        <test-method status="PASS" signature="aftermethod(org.testng.ITestResult)[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="aftermethod" is-config="true" duration-ms="838" started-at="2020-09-29T14:43:49Z" finished-at="2020-09-29T14:43:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=removeHotelSelection status=SUCCESS method=FunctionalTest.removeHotelSelection()[pri:5, instance:TestCases.FunctionalTest@4566e5bd] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Report generated with screenshot]]>
            </line>
          </reporter-output>
        </test-method> <!-- aftermethod -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:TestCases.FunctionalTest@4566e5bd]" name="afterTest" is-config="true" duration-ms="860" started-at="2020-09-29T14:43:50Z" finished-at="2020-09-29T14:43:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- TestCases.FunctionalTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
